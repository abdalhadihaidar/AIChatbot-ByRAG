{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\l\\\\RAG-system\\\\frontend\\\\src\\\\components\\\\FloatingButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './FloatingButton.css'; // Assuming the CSS is in this file\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FloatingButton = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [prompt, setPrompt] = useState('');\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null); // Create a reference to the bottom of the chat\n\n  // Scroll to the bottom of the chat messages when a new message is added\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]); // Whenever the messages array changes, scroll to bottom\n\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (prompt.trim()) {\n      const userMessage = {\n        sender: 'user',\n        text: prompt\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      try {\n        // Send the prompt to the backend (replace '/query' with your actual backend endpoint)\n        const response = await axios.post('http://localhost:5000/query', {\n          query: prompt\n        });\n\n        // Access the 'answer' field from the backend's response instead of 'reply'\n        const botMessage = {\n          sender: 'bot',\n          text: response.data.results.answer || 'No response available.'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error('Error sending prompt:', error);\n        const botErrorMessage = {\n          sender: 'bot',\n          text: 'Error: Unable to get a response.'\n        };\n        setMessages(prevMessages => [...prevMessages, botErrorMessage]);\n      }\n      setPrompt('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"floating-btn\",\n      onClick: toggleChatbot,\n      children: \"\\uD83D\\uDCAC Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: toggleChatbot,\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: msg.sender === 'user' ? 'user-message' : 'bot-message',\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"chat-input-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prompt,\n            onChange: e => setPrompt(e.target.value),\n            placeholder: \"Type your message...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(FloatingButton, \"8vijmZoGNtZu/5v0yShtGdmelxA=\");\n_c = FloatingButton;\nexport default FloatingButton;\nvar _c;\n$RefreshReg$(_c, \"FloatingButton\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","FloatingButton","_s","isOpen","setIsOpen","prompt","setPrompt","messages","setMessages","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","toggleChatbot","handleSubmit","e","preventDefault","trim","userMessage","sender","text","prevMessages","response","post","query","botMessage","data","results","answer","error","console","botErrorMessage","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/l/RAG-system/frontend/src/components/FloatingButton.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './FloatingButton.css'; // Assuming the CSS is in this file\r\nimport axios from 'axios';\r\n\r\nconst FloatingButton = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [prompt, setPrompt] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const messagesEndRef = useRef(null);  // Create a reference to the bottom of the chat\r\n\r\n    // Scroll to the bottom of the chat messages when a new message is added\r\n    const scrollToBottom = () => {\r\n        if (messagesEndRef.current) {\r\n            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);  // Whenever the messages array changes, scroll to bottom\r\n\r\n    const toggleChatbot = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (prompt.trim()) {\r\n            const userMessage = { sender: 'user', text: prompt };\r\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n            try {\r\n                // Send the prompt to the backend (replace '/query' with your actual backend endpoint)\r\n                const response = await axios.post('http://localhost:5000/query', { query: prompt });\r\n\r\n                // Access the 'answer' field from the backend's response instead of 'reply'\r\n                const botMessage = { sender: 'bot', text: response.data.results.answer || 'No response available.' };\r\n                setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n            } catch (error) {\r\n                console.error('Error sending prompt:', error);\r\n                const botErrorMessage = { sender: 'bot', text: 'Error: Unable to get a response.' };\r\n                setMessages((prevMessages) => [...prevMessages, botErrorMessage]);\r\n            }\r\n\r\n            setPrompt('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Floating Button */}\r\n            <button className=\"floating-btn\" onClick={toggleChatbot}>\r\n                ðŸ’¬ Chat\r\n            </button>\r\n\r\n            {/* Chatbot Window */}\r\n            {isOpen && (\r\n                <div className=\"chatbot-window\">\r\n                    <div className=\"chatbot-header\">\r\n                        <h3>Chatbot</h3>\r\n                        <button className=\"close-btn\" onClick={toggleChatbot}>âœ–</button>\r\n                    </div>\r\n                    <div className=\"chatbot-body\">\r\n                        {/* Scrollable Chat Messages */}\r\n                        <div className=\"chat-messages\">\r\n                            {messages.map((msg, index) => (\r\n                                <div key={index} className={msg.sender === 'user' ? 'user-message' : 'bot-message'}>\r\n                                    <p>{msg.text}</p>\r\n                                </div>\r\n                            ))}\r\n                            <div ref={messagesEndRef} /> {/* This will track the bottom of the chat */}\r\n                        </div>\r\n                        {/* Input Field */}\r\n                        <form onSubmit={handleSubmit} className=\"chat-input-form\">\r\n                            <input\r\n                                type=\"text\"\r\n                                value={prompt}\r\n                                onChange={(e) => setPrompt(e.target.value)}\r\n                                placeholder=\"Type your message...\"\r\n                                required\r\n                            />\r\n                            <button type=\"submit\">Send</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FloatingButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}