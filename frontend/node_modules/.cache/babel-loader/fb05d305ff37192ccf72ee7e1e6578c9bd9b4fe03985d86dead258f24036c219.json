{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\l\\\\RAG-system\\\\frontend\\\\src\\\\components\\\\FilesInputForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FilesInputForm = () => {\n  _s();\n  const [files, setFiles] = useState(null); // Store selected files\n  const [responseMessage, setResponseMessage] = useState(''); // Store response message\n\n  // Handle file selection\n  const handleFileChange = e => {\n    setFiles(e.target.files); // Get the selected files from input\n  };\n\n  // Handle form submission (upload)\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!files || files.length === 0) {\n      setResponseMessage(\"No file selected.\");\n      return;\n    }\n    const formData = new FormData(); // Create FormData object\n    formData.append('file', files[0]); // Add the file to the form data\n\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data' // Ensure the content type is multipart/form-data\n        }\n      });\n      setResponseMessage(response.data.message || \"File uploaded successfully.\");\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setResponseMessage(\"Error: \" + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Submit Files (PDF, CSV, Text)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \".pdf,.txt,.csv\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: responseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(FilesInputForm, \"cDWEJlYZlDlRVTmH+hbYkXTJ9SI=\");\n_c = FilesInputForm;\nexport default FilesInputForm;\nvar _c;\n$RefreshReg$(_c, \"FilesInputForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","FilesInputForm","_s","files","setFiles","responseMessage","setResponseMessage","handleFileChange","e","target","handleSubmit","preventDefault","length","formData","FormData","append","response","post","headers","data","message","error","_error$response","_error$response$data","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","accept","_c","$RefreshReg$"],"sources":["C:/Users/l/RAG-system/frontend/src/components/FilesInputForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst FilesInputForm = () => {\r\n    const [files, setFiles] = useState(null);  // Store selected files\r\n    const [responseMessage, setResponseMessage] = useState('');  // Store response message\r\n\r\n    // Handle file selection\r\n    const handleFileChange = (e) => {\r\n        setFiles(e.target.files);  // Get the selected files from input\r\n    };\r\n\r\n    // Handle form submission (upload)\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!files || files.length === 0) {\r\n            setResponseMessage(\"No file selected.\");\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();  // Create FormData object\r\n        formData.append('file', files[0]);  // Add the file to the form data\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/upload', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',  // Ensure the content type is multipart/form-data\r\n                },\r\n            });\r\n            setResponseMessage(response.data.message || \"File uploaded successfully.\");\r\n        } catch (error) {\r\n            setResponseMessage(\"Error: \" + (error.response?.data?.error || error.message));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Submit Files (PDF, CSV, Text)</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"file\" onChange={handleFileChange} accept=\".pdf,.txt,.csv\" />\r\n                <br />\r\n                <button type=\"submit\">Upload</button>\r\n            </form>\r\n            <p>{responseMessage}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FilesInputForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}